<?php
/**
 * Author : Vinek T.;
 * Description : This module gives attempt to login/register in drupal site 
 * with netFORUM SOAP api. You can find multiple functions present as a global 
 * methods & to override and change the behaviour of default user login.
 * Date : 16th March'2017;
 */

/**
 * Implements hook_init().
 */
function netauth_init() {
	if (isset($_SESSION['netauth_link'])) {
		drupal_add_link($_SESSION['netauth_link']);
		unset($_SESSION['netauth_link']);
	}
}

/**
 * Implements hook_menu().
 * Menu will display in Configuration option under the netFORUM tab 
 */
function netauth_menu() {
	$items = array();
	$items['admin/config/netforum'] = array(
		'title' => 'netFORUM',
		'description' => 'Set the connection characteristics for the netFORUM database',
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);
	$items['admin/config/netforum/auth/settings'] = array(
		'title' => 'xWeb Configuration',
		'description' => 'netFORUM xWeb Authentication.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('netauth_admin_settings'),
		'access arguments' => array('administer site configuration'),
	);
	return $items;
}

/**
 * Implements hook_form().
 *	
 * The callback function for settings up the form for netFORUM SSO auth.
 * This callback function will display to the admin side into netFORUM group.
 *
 * @param $node
 * @param $form_state
 * @return $form
 */
function netauth_admin_settings($node, &$form_state) {
	$form['overview'] = array(
		'#markup' => t('Manage netFORUM SSO Module Settings.'),
		'#prefix' => '<p>',
		'#suffix' => '</p>',
	);
	$form['netauth_enabled'] = array(
		'#title'         => t('Enable netFORUM Authentication'),
		'#description'   => t('When enabled, allows users to sign in using Avectra netFORUM credentials.'),
		'#type'          => 'checkbox',
		'#default_value' => variable_get('netauth_enabled'),
	);
	$form['xweb'] = array(
		'#title'       => t('netFORUM Configuration'),
		'#type'        => 'fieldset',
		'#collapsible' => TRUE,
		'#collapsed'   => FALSE,
	);
	$form['xweb']['netauth_wsdl_url'] = array(
		'#title'         => t('xWeb WSDL Url'),
		'#description'   => t('xWeb WSDL url, must start with http:// or https://'),
		'#type'          => 'textfield',
		'#default_value' => variable_get('netauth_wsdl_url'),
		'#required'      => TRUE,
	);
	$form['xweb']['netauth_user'] = array(
		'#title'         => t('xWeb Username'),
		'#description'   => t('Username to the xWeb user account, minimum 5 characters format (a-z 0-9 _-)'),
		'#type'          => 'textfield',
		'#default_value' => variable_get('netauth_user'),
		'#required'      => TRUE,
	);
	$form['xweb']['netauth_pass'] = array(
		'#title'         => t('xWeb Password'),
		'#description'   => t('Password to the xWeb user account, minimum 5 characters.'),
		'#type'          => 'textfield',
		'#default_value' => variable_get('netauth_pass'),
		'#required'      => TRUE,
	);
	$form['cache'] = array(
		'#title'       => t('netFORUM Cache'),
		'#description' => t('Cache configuration for netFORUM module.'),
		'#type'        => 'fieldset',
		'#collapsible' => TRUE,
		'#collapsed'   => TRUE,
	);
	$form['cache']['netauth_secret'] = array(
		'#title'         => t('Cache Secret Key'),
		'#description'   => t('Enter exactly 16 or 20 random characters for cache encryption.'),
		'#type'          => 'textfield',
		'#default_value' => variable_get('netauth_secret', user_password(20)),
		'#required'      => TRUE,
	);
	$form['cache']['netauth_ttl'] = array(
		'#title'         => t('Cache TTL'),
		'#description'   => t('Enter cache time to live settings in seconds.'),
		'#type'          => 'textfield',
		'#default_value' => variable_get('netauth_ttl', 6400),
		'#required'      => TRUE,
	);
	$form['availability'] = array(
		'#title'       => t('netFORUM Availability'),
		'#description' => t('Connection timeout settings for netFORUM.'),
		'#type'        => 'fieldset',
		'#collapsible' => TRUE,
		'#collapsed'   => TRUE,
	);
	$form['availability']['netauth_timeout'] = array(
		'#type'          => 'textfield',
		'#title'         => t('Slow query limit'),
		'#description'   => t('Any xWeb requests over this time limit are marked with warnings in the system logs.'),
		'#after_field'   => t('seconds'),
		'#default_value' => variable_get('netauth_timeout', '10'),
		'#field_suffix'  => t('seconds'),
	);
	$form['availability']['netauth_connection_timeout'] = array(
		'#type'          => 'textfield',
		'#title'         => t('xWeb timeout'),
		'#description'   => t('If netFORUM cannot be contacted in this time it is logged as an error'),
		'#field_suffix'  => t('seconds'),
		'#default_value' => variable_get('netauth_connection_timeout', 9),
	);
	return system_settings_form($form);
}

/**
 * Implements hook_validate()
 *
 * @param $form
 * @param $form_state
 */
function netauth_admin_settings_validate($form, &$form_state) {
	$input = $form_state['values'];

	// Validate to make sure netauth is enabled
	if (!$input['netauth_enabled']) {
		form_set_error('netauth_enabled', t('Did you forget to enable External Authentication?'));
	}
	
	// Validate wsdl url.
	if (!preg_match('/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?(\?WSDL)?$/', $input['netauth_wsdl_url'])) {
		form_set_error('netauth_wsdl_url', t('Invalid WSDL Url; must be a complete url starting with http://... or https://'));
	}
	
	// Validate xWeb username.
	if (!preg_match('/^[a-z0-9_-]{5,64}$/', $input['netauth_user'])) {
		form_set_error('netauth_user', t('Invalid Username; must be alpha numeric with minimum 5 characters.'));
	}
	
	// Validate xWeb password.
	if (!preg_match('/^.{5,64}$/', $input['netauth_pass'])) {
		form_set_error('netauth_pass', t('Invalid Password; must be minimum 5 characters.'));
	}
	
	// Validate cache secret.
	if (!preg_match('/^.{16,20}$/', $input['netauth_secret'])) {
		form_set_error('netauth_secret', t('netFORUM Cache Secret key must be 16 or 20 characters.'));
	}
	
	// Validate cache ttl.
	if (!is_numeric($input['netauth_ttl'])) {
		form_set_error('netauth_ttl', t('netFORUM cache ttl must be numeric.'));
	}
	
	// Validate connection timeouts.
	if (!is_numeric($input['netauth_timeout']) || !is_numeric($input['netauth_connection_timeout'])) {
		form_set_error('netauth_timeout', t('netFORUM connection timeouts must be numeric.'));
	}

	// Validate connection timeouts.
	if ($input['netauth_timeout'] <= 5 || $input['netauth_connection_timeout'] <= 5) {
		form_set_error('netauth_timeout', t('netFORUM connection timeouts must be greater than 5.'));
	}
}

/**
 * Implements hook_form_alter();
 * Manage complete login form functionality here and change it drastically;
 *
 * @param $form
 * @param $form_state
 */
function netauth_form_user_login_alter(&$form, $form_state) {
    unset ($form['links']);
    $form ['#validate'] = [
        'user_login_name_validate',
        'netauth_login_validate',
        'user_login_final_validate'
    ];
}

/**
 * @param $form
 * @param $form_state
 */
function netauth_form_user_login_block_alter(&$form, $form_state) {
    netauth_form_user_login_alter($form, $form_state);
}

/**
 * Implement hook_user_profile_form_alter() to disable the ability to change
 * email address and password for externally authenticated users.
 *
 * @param $form
 * @param $form_state
 */
function netauth_form_user_profile_form_alter(&$form, $form_state) {
    global $user;

    if (strpos($form ['#user']->name, '@') !== FALSE) {
        $form ['account'] ['name'] ['#disabled'] = TRUE;
        $form ['account'] ['name'] ['#description'] = t('The username for this account cannot be changed');
        $form ['account'] ['mail'] ['#disabled'] = TRUE;
        $form ['account'] ['mail'] ['#description'] = t('This e-mail address for this account cannot be changed.');
        $form ['#submit'] [] = 'netauth_update_nf_password';
    }
}

/**
 * Function to retrieve the password entered so as to update it on
 * netFORUM
 *
 * @param $form
 * @param $form_state
 */
function netauth_update_nf_password(&$form, &$form_state) {
    global $user;
	$response = array();
	$wsdlurl = variable_get('netauth_wsdl_url');
	$username = variable_get('netauth_user');
	$password = variable_get('netauth_pass');
    
    $input = $form_state['values'];
    $new_pass = $form_state['values']['pass'];
    if (array_key_exists('uid', $form_state) && ($form_state['uid'] <= 1)) {
        return;
    }
    try {
        $existingUser = user_load($user->uid);
    	if ($existingUser == FALSE) {
            throw new RuntimeException("Cannot load user information");
        }
        $cst_key = _netauth_get_cst_key_from_uid($user->uid);
        
        $obj = new stdClass();
        $obj->any = toXml([
            'IndividualObject' => [
                'cst_web_new_password' => $new_pass
            ]
        ]);
        _netforum_setPassword($cst_key,$obj);
	}
    catch (Exception $e) {
    	if ($user->uid == 1) {
    		drupal_set_message(t("Admin User"), 'status', FALSE);
    	} 
    	else {
    		form_set_error('netauth_wsdl_url', t('Uh Oh!, ' . $e->getMessage()));
	        return FALSE;
    	}
    }
    drupal_set_message(user_profile_form_submit($form, $form_state), 'status', FALSE);
}

/**
 * Function to reset the password from forgot password section.
 * netFORUM
 *
 * @param $form
 * @param $form_state
 */
function netauth_form_user_pass_alter(&$form, &$form_state) {
    $old_validate = $form['#validate'];
    $form['#validate'][0] = 'netauth_reset_user_pass';
    
    //make the fusionspan validator run first
    $count = 1;
    foreach ($old_validate as $func) {
        $form['#validate'][$count++] = $func;
    }
}

/**
 * Callback function netauth_reset_user_pass() to reset the password.
 * netFORUM
 *
 * @param $form
 * @param $form_state
 */
function netauth_reset_user_pass(&$form, &$form_state) {
	$email = $form['name']['#value'];
    $name = array_keys($form)[0];
    $account = user_external_load($email);

    // Check if this customer has a netFORUM account already in drupal
    if (!$account) { // There is no user present with this email
        $customer = _netforum_getCustByMail($email);
            
        // Sometimes netFOURM sends an array of emails that match, occasionally 
        // for the same user, in that case just pick the first one
        if(!isset($customer['cst_key']) && isset($customer[0])){
            $customer = (array) $customer[0];
        }
        if (isset($customer['cst_key'])) {
        	// Check if there is a user with this email, if so let the default 
        	// validator handle it
            if (user_load_by_mail($email)) {
                return TRUE;
            }

            $cust_info = _netforum_getCustByKey($customer['cst_key']);
            if (!is_array($cust_info)) {
                form_set_error($name, t("An error occurred contacting netFORUM, please try again"));
                return FALSE;
            }
            if(!isset($cust_info["EmailAddress"])){
                form_set_error($name, t("No email set on netFORUM"));
                return FALSE;
            }

            // Check if it is the primary email
            if ($customer['EmailAddress'] != $cust_info["EmailAddress"]) {
                form_set_error($name, t("Invalid Email. This is not the primary email for this account, or another netFORUM account is also tied to this email"));
                return FALSE;
            }

            // Check if there is already a user with this cst key in drupal. 
            // They may have changed their email
            $user_id = _netauth_get_uid_from_cst_key($customer['cst_key']);
            if (!$user_id) {
                // Register this new user.
                $userinfo = [
                    'name'   => $customer['EmailAddress'],
                    'pass'   => user_password(),
                    'init'   => $customer['EmailAddress'],
                    'mail'   => $customer['EmailAddress'],
                    'status' => 1,
                    'access' => REQUEST_TIME
                ];

                $new_account = user_save(drupal_anonymous_user(), $userinfo);
                
                // Terminate if an error occurred during user_save().
                if (!$new_account) {
                    form_set_error($name, t("An error occurred please try again"));
                    return FALSE;
                }
                user_set_authmaps($new_account, ["authname_netauth" => $email]);
                _netauth_set_cst_key_uid($new_account->uid, $customer['cst_key'],"","");
            } 
            else {
                // Update the current exsisting user
            	$cst_acc = user_load($user_id);
            	$cst_acc->name = $customer['EmailAddress'];
                $cst_acc->mail = $customer['EmailAddress'];
                $save_user = user_save((object) ['uid' => $cst_acc->uid], (array) $cst_acc);

                // Terminate if an error occurred during user_save().
                if (!$save_user) {
                    form_set_error($name, t("An error occurred please try again"));
                    return FALSE;
                }

                // Update authmap
                _netauth_update_authmap($customer['EmailAddress'], $cst_acc->uid);
            }
            return TRUE;
        }
    } 
    else { // There is already a user present with this email
    	$cust_cst = _netauth_get_cst_key_from_uid($account->uid);

        // There is an associated netFORUM account
        if (!empty($cust_cst)) {
            $cust_info = _netforum_getCustByKey($cust_cst);

            if (!is_array($cust_info)) {
                form_set_error($name, t("An error occurred contacting netFORUM, please try again"));
                return FALSE;
            }
            if(!isset($cust_info["EmailAddress"])){
                form_set_error($name, t("No email set on netFORUM"));
                return FALSE;
            }

            $site_acc = user_load_by_mail($cust_info["EmailAddress"]);
			$site_acc_cst_key = ($site_acc) ? _netauth_get_cst_key_from_uid($site_acc->uid) : '';
			$siteEmail = (variable_get('site_mail', '') == '') ? '' : "(" . variable_get('site_mail', '') . ")";
			if($site_acc_cst_key != $cust_cst){
				form_set_error($name, "Your email has been changed on netFORUM. Another user with this email already exists. Please contact your site administrator ".$siteEmail." for more information");
                return FALSE;
            }
			if($account->name != $cust_info["EmailAddress"]){
                form_set_error($name, "Your email has been changed in netFORUM. Please check your email. Contact: {$siteEmail} for more information");
                return FALSE;
            }
        }
    }
    return TRUE;
}

/**
 * Implements hook_validate()
 * The netauth_login_validate() function attempts to authenticate a user off 
 * the external system using their e-mail address.
 *
 * @param $form
 * @param $form_state
 */
function netauth_login_validate($form, &$form_state) {
    global $user;
    global $name;
    global $pass;

    $created = date("Y-m-d h:i");
    $username = variable_get('netauth_user');
	$password = variable_get('netauth_pass');

    $input = $form_state['input'];
    $name = $input["name"];
    $pass = $input["pass"];

    $uid = _netauth_get_uid_from_username($name);
	$external_id = _netauth_get_external_uid_from_username($name);
	
    $user_by_email = user_load_by_mail($name);
    $authToken = _netforum_ssoauth($username,$password);
    $get_sso = _netforum_ssoToken($name,$pass,$authToken);
	if ($get_sso) {
		$sso = explode("=",$get_sso);
		$ssoToken = $sso[1];
	} 
	else {
		$ssoToken = "";
	}
	
	if (($external_id || !$uid) && ((!$uid && !$user_by_email) || (isset($user_by_email->uid) && $uid == $user_by_email->uid && $external_id)) && $ssoToken) {
		$cst_key = _netforum_cstKey($username,$password,$ssoToken);
		$existing_uid = _netauth_get_uid_from_cst_key($cst_key);
		$existing_user = NULL;
		
		if ($existing_uid) {
            // Get customer info
			$arr_cust= _netforum_getCustByKey($cst_key);
        	$member_flg = $arr_cust["MemberFlag"];
        	$memtype = ($member_flg == 0) ? "nfnonmember" : "nfmember";

        	// Save new user
        	$existing_user = user_load($existing_uid);
        	$existing_user->name = $name;
            $existing_user->mail = $name;
            $existing_user->pass = $pass;

            // Save existing user
            user_save((object) ['uid' => $existing_user->uid], (array) $existing_user);

            // Update the authmap
            _netauth_update_authmap($name, $existing_uid);

            // Update the fs_netforum_auth table
            _netauth_set_sso_token_from_uid($existing_uid,$ssoToken);

            // Login the user.
            user_external_login_register($name, 'netauth');
        } 
        else {
			// There is no uid with that cst key but there may be already be a user with that email
            if ($existing_uid != $uid) {
            	$name = array_keys($form)[0];
                $siteEmail = (variable_get('site_mail', '') == '') ? '' : "(".variable_get('site_mail', '').")";
                form_set_error($name, t("Invalid credentials. Please contact your system administrator ".$siteEmai."."));
                return FALSE;
            }

            // Get customer info
			$arr_cust= _netforum_getCustByKey($cst_key);
        	$memtype = ($arr_cust["MemberFlag"] == 0) ? "nfnonmember" : "nfmember";
        	
            // Register the user.
            user_external_login_register($name, 'netauth');
            
            // Insert into the fs_netforum_auth table
            _netauth_set_cst_key_uid($user->uid,$cst_key,$memtype,$ssoToken);

            // Save/update user email and load user object
            $existingUser = user_load($user->uid);

            // Update some user property
            $existingUser->mail = $input ['name'];
            $existingUser->pass = $input ['pass'];

            // Save existing user
            user_save((object) ['uid' => $existingUser->uid], (array) $existingUser);
        }

        $form_state['uid'] = $user->uid;
        // We took the form by reference and edited it here. User 
        // user_external_login_register will call the submit method 
        // (user_login_submit) for us, so clear it out to prevent it from continuing.
        $form ['#submit'] = [];

        // Set sso token in session.
        $_SESSION ['netforum_sso'] = $ssoToken;

        // Add a hook for netGroups module.
        module_invoke('netgroups', 'groups_validate');
	} 
	else {
        // Use standard Drupal authentication function
        user_login_authenticate_validate($form, $form_state);
    }
}

/**
 * Implements hook_user_delete()
 *
 * @param unknown $account
 */
function netauth_user_delete($account) {
    db_delete('fs_netforum_auth')->condition('uid', $account->uid)->execute();
}

/**
 * @file
 * Helper functions to return a users uid based on their username.
 *
 * @param $username
 */
function _netauth_get_uid_from_username($username) {
	return db_query('SELECT uid from {users} WHERE name = :name', [':name' => $username])->fetchField();
}

/**
 * @param $username
 * @return mixed
 */
function _netauth_get_external_uid_from_username($username) {
	return db_query('SELECT uid FROM {authmap} WHERE authname = :authname AND module = :module',[':authname'=>$username,':module'=>'netauth',])->fetchField();
}

/**
 * Gets the drupal uid whose netFORUM customer key is within the database
 * or returns false if that key is not stored in the database
 *
 * @param $cst_key
 * @return mixed
 */
function _netauth_get_uid_from_cst_key($cst_key) {
	return db_query('SELECT uid FROM {fs_netforum_auth} WHERE cst_key = :cst_key', [':cst_key' => $cst_key])->fetchField();
}
function _netauth_get_cst_key_from_uid($uid) {
	return db_query('SELECT cst_key FROM {fs_netforum_auth} WHERE uid = :uid', [':uid' => $uid,])->fetchField();
}
function _netauth_set_cst_key_uid($uid,$cst_key,$memtype,$ssoToken) {
	return db_insert('fs_netforum_auth')->fields(['uid'=>$uid,'cst_key'=>$cst_key,'member_type'=>$memtype,'sso_token'=>$ssoToken])->execute();
}
function _netauth_set_sso_token_from_uid($uid,$ssoToken) {
	return db_update('fs_netforum_auth')->fields(['sso_token' => $ssoToken])->condition('uid', $uid)->execute();
}
function _netauth_update_authmap($name, $uid) {
	return db_update('authmap')->fields(['authname' => $name])->condition('uid', $uid)->execute();
}

/**
 * Attempts to authorize a user via netFORUM
 *
 * @param $user
 * @param $pass
 * @return string auth Token
 */
function _netforum_ssoauth($user,$pass) {
	$response = "";
	$client = new SoapClient("https://netforum.avectra.com/xWeb/Signon.asmx?WSDL", array('trace' => 1));
	$result = $client->__soapCall("Authenticate", array("params"=>array("userName"=>$user,"password"=>$pass)), null, null, $response);
	return $result->AuthenticateResult;
}

/**
 * Attempts to authorize a user via netFORUM
 *
 * @param $username
 * @param $password
 * @return string SSO Token | bool false
 */
function _netforum_ssoToken($user,$pass,$authToken) {
	try {
		$response = "";
		$client = new SoapClient("https://netforum.avectra.com/xWeb/Signon.asmx?WSDL", array('trace' => 1));
		$result = $client->__soapCall("GetSignOnToken", array("params"=>array("Email"=>$user,"Password"=>$pass,"AuthToken"=>$authToken,"Minutes"=>"45")), null, null, $response);
		return $result->GetSignOnTokenResult;
	} catch (SoapFault $fault) {
		// TO DO : Setting up the catch message or just un-comment the following 
		// two lines.

		// trigger_error("SOAP Fault: (faultcode: {$fault->faultcode}, faultstring: {$fault->faultstring})", E_USER_ERROR);
		// return drupal_set_message(t('Invalid credentials! Please contact administrator.'), 'error');
	}
}

/**
 *
 * @param $username
 * @param $password
 * @return string user_cst key | bool false
 */
function _netforum_cstKey($user,$pass,$ssoToken) {
	$authToken = _netforum_ssoauth($user,$pass);
	$client = new SoapClient("https://netforum.avectra.com/xWeb/Signon.asmx?WSDL", array('trace' => 1));
	$result = $client->__soapCall("GetCstKeyFromSignOnToken", array("params"=>array("AuthToken"=>$authToken,"szEncryptedSingOnToken"=>$ssoToken)), null, null, $response);
	return $result->GetCstKeyFromSignOnTokenResult;
}

/**
 * Make authorize to user via netFORUM console
 *
 * @param $user
 * @param $pass
 */
function _netforum_authenticate($user,$pass) {
	$response = "";
	$wsdlurl = variable_get('netauth_wsdl_url');
	$client = new SoapClient($wsdlurl, array('trace' => 1));
	$result = $client->__soapCall("Authenticate", array("params"=>array("userName"=>$user,"password"=>$pass)), null, null, $response);
	$getResult = $result->AuthenticateResult;
	return $response['AuthorizationToken']->Token;
}

/**
 *
 * @param $username
 * @param $password
 * @return string user_cst key | bool false
 */
function _netforum_getCustByKey($cstKey) {
	$response = array();
	$wsdlurl = variable_get('netauth_wsdl_url');
	$username = variable_get('netauth_user');
	$password = variable_get('netauth_pass');
	$client = new SoapClient($wsdlurl, array('trace' => 1));
	$result = $client->__soapCall("Authenticate", array("params"=>array("userName"=>$username,"password"=>$password)),null,null,$response);
	$getResult = $result->AuthenticateResult;
	$token = $response['AuthorizationToken']->Token;

	// Making of soapHeader
	if ($response != null || isset($response['AuthorizationToken']) || isset($response['AuthorizationToken']->Token)){
		$token = $response['AuthorizationToken']->Token;
	}
	$header = new SoapHeader($getResult, "AuthorizationToken", array("Token" => $token));
	$result2 = $client->__soapCall("GetCustomerByKey",array("GetCustomerByKey"=>array("szCstKey"=>$cstKey)),null,$header,$inforesponse);
	$cust_info = new SimpleXMLElement($result2->GetCustomerByKeyResult->any);
	$array = json_decode(json_encode((array)$cust_info), TRUE);
	return $array['Result'];
}

/**
 *
 * @param $username
 * @param $password
 * @return string user_mail id
 */
function _netforum_getCustByMail($email) {
	$response = array();
	$wsdlurl = variable_get('netauth_wsdl_url');
	$username = variable_get('netauth_user');
	$password = variable_get('netauth_pass');
	$client = new SoapClient($wsdlurl, array('trace' => 1));
	$result = $client->__soapCall("Authenticate", array("params"=>array("userName"=>$username,"password"=>$password)),null,null,$response);
	$getResult = $result->AuthenticateResult;
	$token = $response['AuthorizationToken']->Token;

	// Making of soapHeader
	if ($response != null || isset($response['AuthorizationToken']) || isset($response['AuthorizationToken']->Token)){
		$token = $response['AuthorizationToken']->Token;
	}
	$array['Result'] = array();
	$header = new SoapHeader($getResult, "AuthorizationToken", array("Token" => $token));
	$result2 = $client->__soapCall("GetCustomerByEmail",array("GetCustomerByEmail"=>array("szEmailAddress"=>$email)),null,$header,$inforesponse);
	$cust_info = new SimpleXMLElement($result2->GetCustomerByEmailResult->any);
	$array = json_decode(json_encode((array)$cust_info), TRUE);
	return (!$array['Result']) ? "" : $array['Result'];
}

/**
 *
 * @param $username
 * @param $password
 * @return string user_mail id
 * @return string user_mail id
 */
function _netforum_setPassword($key,$node) {
	$response = array();
	$wsdlurl = variable_get('netauth_wsdl_url');
	$username = variable_get('netauth_user');
	$password = variable_get('netauth_pass');
	$client = new SoapClient($wsdlurl, array('trace' => 1));
	$result = $client->__soapCall("Authenticate", array("params"=>array("userName"=>$username,"password"=>$password)),null,null,$response);
	$getResult = $result->AuthenticateResult;
	$token = $response['AuthorizationToken']->Token;

	// Making of soapHeader
	if ($response != null || isset($response['AuthorizationToken']) || isset($response['AuthorizationToken']->Token)){
		$token = $response['AuthorizationToken']->Token;
	}
	$header = new SoapHeader($getResult, "AuthorizationToken", array("Token" => $token));
	$result2 = $client->__soapCall("SetIndividualInformation",array("SetIndividualInformation"=>array("IndividualKey"=>$key,"oUpdateNode"=>$node)),null,$header,$inforesponse);
	return $setupinfo = $result2->SetIndividualInformationResult->any;
}

/**
 * Function to convert the respective array into XML to use into xml unicode style
 *
 * @param $params
 * @param $rootNodeName
 */
function toXml(array $params, $rootNodeName = null) {
    $array_to_be_called = $params;
    if ( $rootNodeName == null ) {
        reset($params);
        $rootNodeName = key($params);
        $array_to_be_called = $params[$rootNodeName];
    }
    $xml_to_send = new SimpleXMLElement ("<" . $rootNodeName . "></" . $rootNodeName . ">");

    createXMLFromArray($array_to_be_called, $xml_to_send);
    $dom_xml_to_send = dom_import_simplexml($xml_to_send);

    return $dom_xml_to_send->ownerDocument->saveXML($dom_xml_to_send->ownerDocument->documentElement);
}
function createXMLFromArray(array $params, SimpleXMLElement &$xml_result) {
    foreach ($params as $key => $value) {
        if ( is_array($value) ) {
            if ( !is_numeric($key) ) {
                $subnode = $xml_result->addChild('' . $key);
                createXMLFromArray($value, $subnode);
            } 
            else {
                createXMLFromArray($value, $xml_result);
            }
        } 
        else {
            $xml_result->addChild("" . $key, htmlspecialchars("" . $value));
        }
    }
}

/**
 * Updates the table specified by $tbl_name
 *
 * @param unknown $tbl_name - table name
 * @param unknown $field_array - array with the field name and values to update
 * @param unknown $condition - a size one array where the key is the field name
 *   and the value is the condition value
 */
function _netauth_db_update($tbl_name, $field_array, $condition) {
	reset($condition);
	$key = key($condition);
	db_update($tbl_name)->fields($field_array)
		->condition($key, $condition[$key])
		->execute();
}

/**
 * @param $name
 * @return mixed
 */
function _netauth_get_role_by_name($name) {
	return array_search($name, user_roles());
}
